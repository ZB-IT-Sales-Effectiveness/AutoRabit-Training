{"dataSourceLinks":[],"filters":[],"gridLayouts":[{"maxWidth":1360,"name":"Default","numColumns":48,"pages":[{"name":"8517acd2-2a8d-4606-a51d-6b7798bff8e5","navigationHidden":false,"widgets":[{"colspan":14,"column":1,"name":"text_2","row":1,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":4,"borderWidth":1}},{"colspan":5,"column":27,"name":"link_pipeline_changes","row":2,"rowspan":1,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"rgb(60, 141, 225)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":2}},{"colspan":4,"column":32,"name":"link_by_customer","row":2,"rowspan":1,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":4}},{"colspan":4,"column":36,"name":"link_by_geography","row":2,"rowspan":1,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":4}},{"colspan":48,"column":0,"name":"container_2","row":1,"rowspan":2,"widgetStyle":{"borderColor":"rgb(60, 141, 225)","borderEdges":["bottom"]}},{"colspan":4,"column":1,"name":"listselector_1","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":8,"name":"number_1","row":8,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":41,"name":"listselector_2","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":3,"column":19,"name":"link_overview","row":2,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":14,"column":0,"name":"container_4","row":7,"rowspan":3,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgba(51, 87, 121, 0.5)","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":32,"column":15,"name":"chart_1","row":6,"rowspan":7,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":["right","top","bottom"],"borderWidth":8}},{"colspan":7,"column":1,"name":"text_1","row":8,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(68, 81, 125)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":0,"name":"container_5","row":10,"rowspan":4,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#F2F6FA","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":7,"column":1,"name":"text_4","row":11,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":8,"name":"number_2","row":11,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":0,"name":"number_3","row":5,"rowspan":2,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":9,"name":"number_4","row":5,"rowspan":2,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderEdges":["top"],"borderRadius":0,"borderWidth":24}},{"colspan":48,"column":0,"name":"container_1","row":27,"rowspan":9,"widgetStyle":{"borderEdges":[]}},{"colspan":46,"column":1,"name":"table_1","row":27,"rowspan":8,"widgetStyle":{"borderEdges":[]}},{"colspan":10,"column":1,"name":"text_3","row":25,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":6,"name":"listselector_5","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":11,"name":"listselector_8","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":4,"column":16,"name":"listselector_9","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":[],"borderRadius":0,"borderWidth":24}},{"colspan":48,"column":0,"name":"container_7","row":17,"rowspan":8,"widgetStyle":{"borderColor":"#E6ECF2","borderEdges":["bottom"],"borderWidth":1}},{"colspan":9,"column":1,"name":"text_5","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":2,"name":"listselector_3","row":16,"rowspan":1,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":["top"],"borderWidth":8}},{"colspan":8,"column":14,"name":"listselector_4","row":16,"rowspan":1,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":["top"],"borderWidth":8}},{"colspan":8,"column":26,"name":"listselector_13","row":16,"rowspan":1,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":["top"],"borderWidth":8}},{"colspan":7,"column":39,"name":"listselector_14","row":16,"rowspan":1,"widgetStyle":{"borderColor":"#FFFFFF","borderEdges":["top"],"borderWidth":8}},{"colspan":19,"column":28,"name":"pillbox_1","row":14,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":8}},{"colspan":10,"column":1,"name":"chart_2","row":17,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":10,"column":13,"name":"chart_3","row":17,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":10,"column":25,"name":"chart_4","row":17,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":10,"column":37,"name":"chart_5","row":17,"rowspan":7,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["bottom"],"borderRadius":0,"borderWidth":8}},{"colspan":3,"column":40,"name":"link_by_source","row":2,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":43,"name":"link_by_product","row":2,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":6,"column":40,"name":"listselector_16","row":25,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":7,"column":33,"name":"text_6","row":25,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":4,"column":26,"name":"ui_RecordType_Name","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"#E6ECF2","borderEdges":[]}},{"colspan":4,"column":21,"name":"listselector_17","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"#E6ECF2","borderEdges":[]}},{"colspan":31,"column":0,"name":"container_9","row":25,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":17,"column":31,"name":"container_10","row":25,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["top"],"borderRadius":0,"borderWidth":20}},{"colspan":17,"column":0,"name":"container_11","row":14,"rowspan":2,"widgetStyle":{"borderEdges":[]}},{"colspan":31,"column":17,"name":"container_12","row":14,"rowspan":2,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#FFFFFF","borderEdges":["top"],"borderRadius":0,"borderWidth":24}},{"colspan":48,"column":0,"name":"container_13","row":16,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":48,"column":0,"name":"container_8","row":3,"rowspan":2,"widgetStyle":{"backgroundColor":"#E6ECF2","borderColor":"#E6ECF2","borderEdges":["top"],"borderRadius":0,"borderWidth":20}},{"colspan":34,"column":14,"name":"container_3","row":5,"rowspan":9,"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":5,"column":22,"name":"link_lead_analysis","row":2,"rowspan":1,"widgetStyle":{"borderEdges":[]}}]}],"rowHeight":"normal","selectors":[],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#C5D3E0","cellSpacingX":0,"cellSpacingY":0,"documentId":"","fit":"original"},"version":1.0},{"name":"Phone","numColumns":24,"pages":[{"name":"8517acd2-2a8d-4606-a51d-6b7798bff8e5","navigationHidden":false,"widgets":[{"colspan":22,"column":1,"name":"listselector_2","row":2,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(230, 236, 242, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":1,"name":"listselector_1","row":3,"rowspan":1,"widgetStyle":{"backgroundColor":"rgba(255, 255, 255, 0)","borderColor":"rgba(255, 255, 255, 0)","borderEdges":["top"],"borderRadius":0,"borderWidth":1}},{"colspan":8,"column":3,"name":"text_4","row":17,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":9,"column":2,"name":"number_2","row":18,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":1,"name":"container_5","row":17,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#F2F6FA","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":10,"column":13,"name":"text_1","row":17,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"rgb(68, 81, 125)","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":13,"name":"number_1","row":18,"rowspan":1,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#FFFFFF","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":11,"column":13,"name":"container_4","row":17,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#F2F6FA","borderEdges":["bottom"],"borderRadius":0,"borderWidth":1}},{"colspan":18,"column":0,"name":"number_3","row":5,"rowspan":2,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":6,"column":18,"name":"number_4","row":5,"rowspan":2,"widgetStyle":{"backgroundColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderColor":"{{coalesce(cell(pipeline_change_color.result, 0, \"color\"), 0).asString()}}","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":14,"column":1,"name":"text_3","row":49,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"table_1","row":50,"rowspan":9,"widgetStyle":{"borderEdges":[]}},{"colspan":24,"column":0,"name":"container_1","row":19,"rowspan":41,"widgetStyle":{"backgroundColor":"#C5D3E0","borderEdges":[]}},{"colspan":24,"column":0,"name":"chart_6","row":7,"rowspan":10,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":24,"column":0,"name":"text_8","row":0,"rowspan":2,"widgetStyle":{"backgroundColor":"#091A3E","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1}},{"colspan":22,"column":1,"name":"chart_2","row":22,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"chart_5","row":43,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"chart_3","row":29,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"chart_4","row":36,"rowspan":5,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"listselector_14","row":42,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"listselector_13","row":35,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":8,"column":15,"name":"listselector_16","row":49,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"listselector_3","row":21,"rowspan":1,"widgetStyle":{"borderEdges":[]}},{"colspan":22,"column":1,"name":"listselector_4","row":28,"rowspan":1,"widgetStyle":{"borderEdges":[]}}]}],"rowHeight":"normal","selectors":["maxWidth(599)"],"style":{"alignmentX":"left","alignmentY":"top","backgroundColor":"#091A3E","cellSpacingX":0,"cellSpacingY":0,"documentId":"","fit":"original"},"version":1.0}],"layouts":[],"steps":{"pipeline_change_color":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"percent\"]],\"pigql\":\"q = load \\\"pipeline_trending3\\\"; q = group q by all; q = foreach q generate {{coalesce(cell(pipeline_change.result, 0, \\\"sum_Amount\\\"), 0).asObject()}} as 'sum_Amount'; q = foreach q generate (case when 'sum_Amount' > 0 then \\\"#3CAF6D\\\" when 'sum_Amount' < 0 then \\\"#D4504C\\\" else \\\"#7D98B3\\\" end) as 'color', 'sum_Amount' as 'sum_Amount';\",\"groups\":[\"color\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":true},"Opportunity_Owner_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Owner.Name') as 'Opportunity.Account.Owner.Name', last(upd_end.'Opportunity.Owner.Name') as 'Opportunity.Owner.Name', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate', last(upd_end.'Opportunity.Owner.Role.Name') as 'Opportunity.Owner.Role.Name'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Owner.Name', 'Opportunity.Account.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Owner.Name') as 'Opportunity.Owner.Name', last('Opportunity.Account.Owner.Name') as 'Opportunity.Account.Owner.Name', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(opportunity_owner_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"pipeline_start":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"Amount\"]],\"pigql\":\"START = load \\\"pipeline_trending3\\\"; START = filter START by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; START = filter START by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; START = filter START by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; START = filter START by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; START = filter START by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; START = filter START by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; START = filter START by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; START = filter START by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; START = filter START by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; START = filter START by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = group START by all; START = foreach START generate \\\"0_START\\\" as 'Bucket', sum('Amount') as 'sum_Amount';\"}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"location_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Shipping State/Province\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Shipping State/Province\",\"dimension\":\"'Opportunity.Account.ShippingState'\",\"grouping_column\":\"Group\"}","{\"display\":\"Shipping City\",\"dimension\":\"'Opportunity.Account.ShippingCity'\",\"grouping_column\":\"Group\"}"]},"step_hbar_group":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"$ High to Low\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"$ High to Low\",\"value\":\"'sum_Amount' desc\"}","{\"display\":\"$ Low to High\",\"value\":\"'sum_Amount' asc\"}"]},"filter_account_industry":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.Class_Description__c\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"step_time":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Last 7 days (Month Close)\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Last 7 days (Month Close)\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Start_ValidTo\":\"\\\"7 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"7 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Update_ValidTo\":\"\\\"7 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 14 days (Month Close)\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Start_ValidTo\":\"\\\"14 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"14 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Update_ValidTo\":\"\\\"14 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 7 days (Quarter Close)\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Start_ValidTo\":\"\\\"7 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"7 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"8 days ago\\\"\",\"Update_ValidTo\":\"\\\"7 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"Last 14 days (Quarter Close)\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Start_ValidTo\":\"\\\"14 days ago\\\"..\",\"Update_End_ValidFrom\":\"\\\"14 days ago\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"15 days ago\\\"\",\"Update_ValidTo\":\"\\\"14 days ago\\\"..\\\"current day\\\"\"}","{\"display\":\"This Month\",\"CloseDate_1\":\"\\\"current month\\\"..\\\"current month\\\"\",\"CloseDate_2\":\"\\\"current month\\\"..\\\"current month\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"1 month ago\\\"\",\"Start_ValidTo\":\"\\\"current month\\\"..\",\"Update_End_ValidFrom\":\"\\\"current month\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"1 month ago\\\"\",\"Update_ValidTo\":\"\\\"current month\\\"..\\\"current day\\\"\"}","{\"display\":\"This Quarter\",\"CloseDate_1\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"CloseDate_2\":\"\\\"current quarter\\\"..\\\"current quarter\\\"\",\"End_ValidFrom\":\"..\\\"current day\\\"\",\"End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Start_ValidFrom\":\"..\\\"1 quarter ago\\\"\",\"Start_ValidTo\":\"\\\"current quarter\\\"..\",\"Update_End_ValidFrom\":\"\\\"current quarter\\\"..\\\"current day\\\"\",\"Update_End_ValidTo\":\"\\\"1 day ahead\\\"..\",\"Update_ValidFrom\":\"..\\\"1 quarter ago\\\"\",\"Update_ValidTo\":\"\\\"current quarter\\\"..\\\"current day\\\"\"}"]},"opportunity_owner_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Opportunity Owner\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Opportunity Owner\",\"dimension\":\"'Opportunity.Owner.Name'\",\"grouping_column\":\"Group\"}","{\"display\":\"Account Owner\",\"dimension\":\"'Opportunity.Account.Owner.Name'\",\"grouping_column\":\"Group\"}"]},"Id_1":{"broadcastFacet":false,"datasets":[{"name":"opportunity3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Owner.Role.RoleNames\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"singlerequired","start":"[\"!{user.rolename}\"]","type":"aggregateflex","useGlobal":true,"visualizationParameters":{"visualizationType":"hbar"}},"Opportunity_ForecastCategoryName_Toggle":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.ForecastCategoryName\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false},"filter_account_source":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.Distributor_Name__c\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"pipeline_change":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"Amount\"],[\"sum\",\"percent\"]],\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; c = group START by all full, END by all; c = foreach c generate coalesce(sum(END['Amount']), 0) - coalesce(sum(START['Amount']), 0) as 'sum_Amount', coalesce( (coalesce(sum(END['Amount']), 0) - coalesce(sum(START['Amount']), 0)) / coalesce(sum(START['Amount']), 0), 0) as 'sum_percent';\"}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"waterfall_chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by 'Id' in all; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; START_REAL = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START_REAL = filter START_REAL by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START_REAL = filter START_REAL by 'Stage.IsClosed' == \\\"false\\\"; START_REAL = filter START_REAL by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START_REAL = group START_REAL by all; START_REAL = foreach START_REAL generate \\\"0_START\\\" as 'Bucket', sum('Amount') as 'sum_Amount'; START_FAKE = group x1 by all; START_FAKE = foreach START_FAKE generate \\\"0_START\\\" as 'Bucket', (count() - count()) as 'sum_Amount'; START = union START_FAKE, START_REAL; START = group START by all; START = foreach START generate last('Bucket') as 'Bucket', last('sum_Amount') as 'sum_Amount'; END_REAL = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END_REAL = filter END_REAL by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END_REAL = filter END_REAL by 'Stage.IsClosed' == \\\"false\\\"; END_REAL = filter END_REAL by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END_REAL = group END_REAL by all; END_REAL = foreach END_REAL generate \\\"9_END\\\" as 'Bucket', sum('Amount') as 'sum_Amount'; END_FAKE = group x1 by all; END_FAKE = foreach END_FAKE generate \\\"9_END\\\" as 'Bucket', (count() - count()) as 'sum_Amount'; END = union END_FAKE, END_REAL; END = group END by all; END = foreach END generate last('Bucket') as 'Bucket', last('sum_Amount') as 'sum_Amount'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as OpportunityId, upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Owner.Name') as 'Opportunity.Owner.Name', last(upd_end.'Opportunity.Owner.Role.Name') as 'Opportunity.Owner.Role.Name', last(upd_end.'Opportunity.Account.Class_Description__c') as 'Opportunity.Account.Class_Description__c', last(upd_end.'Opportunity.Account.ShippingState') as 'Opportunity.Account.ShippingState'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = group upd_full_closed by 'Bucket'; upd_full_closed = foreach upd_full_closed generate 'Bucket', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then - sum('AmountEnd') when \\\"7_CLOSED_WON\\\" then - sum('AmountEnd') end ) as 'sum_Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = group upd_full_notinperiod by 'Bucket'; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then - sum('AmountEnd') when \\\"1_NEW\\\" then sum('AmountEnd') when \\\"2_REOPEN\\\" then sum('AmountEnd') when \\\"4_MOVED_IN\\\" then sum('AmountEnd') end ) as 'sum_Amount'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = group upd_delta by 'Bucket'; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then sum('AmountEnd') - sum('AmountStart') when \\\"3_EXPAND\\\" then sum('AmountEnd') - sum('AmountStart') end ) as 'sum_Amount'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = order WATERFALL by 'Bucket' asc;\",\"measures\":[[\"count\",\"*\",\"sum_Amount\"]],\"measuresMap\":{},\"groups\":[\"Bucket\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"filter_type":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.Record_Type__pc\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"dropdown_opportunity_type":{"broadcastFacet":true,"datasets":[{"name":"opportunity3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity_Classification__c\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"dropdown_record_type":{"broadcastFacet":true,"datasets":[{"name":"opportunity3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"RecordType.Name\"]}","version":-1.0},"receiveFacetSource":{"mode":"all","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"source_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Distributor Name(s)\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Distributor Name(s)\",\"dimension\":\"'Opportunity.Account.Distributor_Name__c'\",\"grouping_column\":\"Group\"}","{\"display\":\"Opportunity Record Type\",\"dimension\":\"'Opportunity.Opportunity_Record_Type__c'\",\"grouping_column\":\"Group\"}"]},"AccountSource_Leadsource_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Distributor_Name__c' as 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c' as 'Opportunity.Opportunity_Record_Type__c', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Distributor_Name__c' as 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c' as 'Opportunity.Opportunity_Record_Type__c', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Distributor_Name__c') as 'Opportunity.Account.Distributor_Name__c', last(upd_end.'Opportunity.Opportunity_Record_Type__c') as 'Opportunity.Opportunity_Record_Type__c', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate', last(upd_end.'Opportunity.Owner.Role.Name') as 'Opportunity.Owner.Role.Name'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Distributor_Name__c', 'Opportunity.Opportunity_Record_Type__c', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.Distributor_Name__c') as 'Opportunity.Account.Distributor_Name__c', last('Opportunity.Opportunity_Record_Type__c') as 'Opportunity.Opportunity_Record_Type__c', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(source_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"multi","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"filter_account_billing_state":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.ShippingCity\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"waterfall_detail":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by 'Id' in all; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Name' as 'Opportunity.Account.Name', 'Opportunity.Name' as 'Opportunity.Name', 'Opportunity.Owner.Name' as 'Opportunity.Owner.Name', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName' as 'Opportunity.ForecastCategoryName', 'Opportunity.StageName' as 'Opportunity.StageName'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Name' as 'Opportunity.Account.Name', 'Opportunity.Name' as 'Opportunity.Name', 'Opportunity.Owner.Name' as 'Opportunity.Owner.Name', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName' as 'Opportunity.ForecastCategoryName', 'Opportunity.StageName' as 'Opportunity.StageName'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Name') as 'Opportunity.Account.Name', last(upd_end.'Opportunity.Name') as 'Opportunity.Name', last(upd_end.'Opportunity.Owner.Name') as 'Opportunity.Owner.Name', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate', last(upd_end.'Opportunity.ForecastCategoryName') as 'Opportunity.ForecastCategoryName', last(upd_end.'Opportunity.StageName') as 'Opportunity.StageName', last(upd_end.'Opportunity.Owner.Role.Name') as 'Opportunity.Owner.Role.Name', last(upd_end.'Opportunity.Account.Class_Description__c') as 'Opportunity.Account.Class_Description__c', last(upd_end.'Opportunity.Account.ShippingState') as 'Opportunity.Account.ShippingState'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.Name') as 'Opportunity.Account.Name', last('Opportunity.Name') as 'Opportunity.Name', last('Opportunity.Owner.Name') as 'Opportunity.Owner.Name', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Opportunity.ForecastCategoryName') as 'Opportunity.ForecastCategoryName', last('Opportunity.StageName') as 'Opportunity.StageName', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', 'Opportunity.Account.Name', 'Opportunity.Name', 'Opportunity.Owner.Name', 'Opportunity.CloseDate', 'Opportunity.ForecastCategoryName', 'Opportunity.StageName', 'Opportunity.Amount', sum('Amount') as 'sum_Amount'; WATERFALL = order WATERFALL by {{cell(step_hbar_group.selection, 0, \\\"value\\\").asString()}}; WATERFALL = limit WATERFALL 100;\",\"measures\":[[\"sum\",\"Amount\"]],\"groups\":[\"Opportunity.Name\",\"Opportunity.Owner.Name\",\"Opportunity.ForecastCategoryName\",\"Opportunity.StageName\",\"Opportunity.CloseDate\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"filter_lead_source":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Opportunity_Record_Type__c\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"account_industry_dimension_dropdown":{"broadcastFacet":false,"columns":{},"isGlobal":false,"selectMode":"singlerequired","start":"{\"display\":[\"Record Type\"]}","type":"staticflex","useGlobal":false,"values":["{\"display\":\"Record Type\",\"dimension\":\"'Opportunity.Account.Record_Type__pc'\",\"grouping_column\":\"Group\"}","{\"display\":\"Class Description\",\"dimension\":\"'Opportunity.Account.Class_Description__c'\",\"grouping_column\":\"Group\"}"]},"Account_Type_Industry_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(location_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(BillingCountry_BillingState_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.Class_Description__c') as 'Opportunity.Account.Class_Description__c', last(upd_end.'Opportunity.Account.Record_Type__pc') as 'Opportunity.Account.Record_Type__pc', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate', last(upd_end.'Opportunity.Owner.Role.Name') as 'Opportunity.Owner.Role.Name'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.Record_Type__pc', 'Opportunity.Account.Class_Description__c', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.Record_Type__pc') as 'Opportunity.Account.Record_Type__pc', last('Opportunity.Account.Class_Description__c') as 'Opportunity.Account.Class_Description__c', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(account_industry_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"pipeline_end":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"sum\",\"Amount\"]],\"pigql\":\"END = load \\\"pipeline_trending3\\\"; END = filter END by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; END = filter END by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; END = filter END by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; END = filter END by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; END = filter END by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; END = filter END by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; END = filter END by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; END = filter END by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; END = filter END by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; END = filter END by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = group END by all; END = foreach END generate \\\"9_END\\\" as 'Bucket', sum('Amount') as 'sum_Amount';\"}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false},"BillingCountry_BillingState_Chart":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"pigql\":\"x1 = load \\\"pipeline_trending3\\\"; x1 = filter x1 by {{cell(source_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(AccountSource_Leadsource_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(account_industry_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Account_Type_Industry_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{cell(opportunity_owner_dimension_dropdown.selection, 0, \\\"dimension\\\").asString()}} in {{coalesce(column(Opportunity_Owner_Chart.selection, [\\\"Group\\\"]), \\\"all\\\").asString()}}; x1 = filter x1 by {{column(dropdown_opportunity_type.selection, [\\\"Opportunity_Classification__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Classification__c\\\")}}; x1 = filter x1 by {{column(dropdown_record_type.selection, [\\\"RecordType.Name\\\"]).asEquality(\\\"Opportunity.RecordType.Name\\\")}}; x1 = filter x1 by {{column(Id_1.selection, [\\\"Owner.Role.RoleNames\\\"]).asEquality(\\\"Opportunity.Owner.Role.RoleNames\\\")}}; x1 = filter x1 by {{column(filter_type.selection, [\\\"Opportunity.Account.Record_Type__pc\\\"]).asEquality(\\\"Opportunity.Account.Record_Type__pc\\\")}}; x1 = filter x1 by {{column(filter_account_industry.selection, [\\\"Opportunity.Account.Class_Description__c\\\"]).asEquality(\\\"Opportunity.Account.Class_Description__c\\\")}}; x1 = filter x1 by {{column(filter_account_billing_country.selection, [\\\"Opportunity.Account.ShippingState\\\"]).asEquality(\\\"Opportunity.Account.ShippingState\\\")}}; x1 = filter x1 by {{column(filter_account_billing_state.selection, [\\\"Opportunity.Account.ShippingCity\\\"]).asEquality(\\\"Opportunity.Account.ShippingCity\\\")}}; x1 = filter x1 by {{column(filter_account_source.selection, [\\\"Opportunity.Account.Distributor_Name__c\\\"]).asEquality(\\\"Opportunity.Account.Distributor_Name__c\\\")}}; x1 = filter x1 by {{column(filter_lead_source.selection, [\\\"Opportunity.Opportunity_Record_Type__c\\\"]).asEquality(\\\"Opportunity.Opportunity_Record_Type__c\\\")}}; x1 = filter x1 by {{column(Opportunity_ForecastCategoryName_Toggle.selection, [\\\"Opportunity.ForecastCategoryName\\\"]).asEquality(\\\"Opportunity.ForecastCategoryName\\\")}}; START = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidFrom\\\").asString()}}]; START = filter START by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Start_ValidTo\\\").asString()}}]; START = filter START by 'Stage.IsClosed' == \\\"false\\\"; START = filter START by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; START = foreach START generate \\\"0_START\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; END = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidFrom\\\").asString()}}]; END = filter END by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"End_ValidTo\\\").asString()}}]; END = filter END by 'Stage.IsClosed' == \\\"false\\\"; END = filter END by date('CloseDate_Year', 'CloseDate_Month', 'CloseDate_Day') in [{{cell(step_time.selection, 0, \\\"CloseDate_1\\\").asString()}}]; END = foreach END generate \\\"9_END\\\" as 'Bucket', 'Amount' as 'Amount', 'OpportunityId' as 'OpportunityId', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'Opportunity.Amount' as 'Opportunity.Amount', 'Opportunity.CloseDate' as 'Opportunity.CloseDate'; upd_start = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidFrom\\\").asString()}}]; upd_start = filter upd_start by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_ValidTo\\\").asString()}}]; upd_end = filter x1 by date('ValidFromDate_Year', 'ValidFromDate_Month', 'ValidFromDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidFrom\\\").asString()}}]; upd_end = filter upd_end by date('ValidToDate_Year', 'ValidToDate_Month', 'ValidToDate_Day') in [{{cell(step_time.selection, 0, \\\"Update_End_ValidTo\\\").asString()}}]; upd = group upd_start by OpportunityId right, upd_end by OpportunityId; upd = foreach upd generate upd_end.'OpportunityId' as 'OpportunityId', upd_start.'OpportunityId' is null as 'New', first(upd_start.'Amount') as 'AmountStart', first(upd_start.'Stage.IsClosed') as 'Stage.IsClosedStart', first(upd_start.'Stage.IsWon') as 'Stage.IsWonStart', first(upd_start.'CloseDate_sec_epoch') as 'CloseDateStart', last(upd_end.'Amount') as 'AmountEnd', last(upd_end.'Stage.IsClosed') as 'Stage.IsClosedEnd', last(upd_end.'Stage.IsWon') as 'Stage.IsWonEnd', last(upd_end.'CloseDate_sec_epoch') as 'CloseDateEnd', last(upd_end.'Opportunity.Account.ShippingState') as 'Opportunity.Account.ShippingState', last(upd_end.'Opportunity.Account.ShippingCity') as 'Opportunity.Account.ShippingCity', last(upd_end.'Opportunity.Amount') as 'Opportunity.Amount', last(upd_end.'Opportunity.CloseDate') as 'Opportunity.CloseDate', last(upd_end.'Opportunity.Owner.Role.Name') as 'Opportunity.Owner.Role.Name'; upd_full_closed = foreach upd generate ( case when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"false\\\" ) then \\\"8_CLOSED_LOST\\\" when ( toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'Stage.IsClosedEnd' == \\\"true\\\" and 'Stage.IsWonEnd' == \\\"true\\\" ) then \\\"7_CLOSED_WON\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'AmountStart', 'AmountEnd'; upd_full_closed = filter upd_full_closed by 'Bucket' != \\\"OTHER\\\"; upd_full_closed = foreach upd_full_closed generate 'Bucket', 'OpportunityId', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'Opportunity.Amount', 'Opportunity.CloseDate', ( case 'Bucket' when \\\"8_CLOSED_LOST\\\" then (0 - 'AmountEnd') when \\\"7_CLOSED_WON\\\" then (0 - 'AmountEnd') end ) as 'Amount'; upd_full_notinperiod = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and not(toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}]) ) then \\\"5_MOVED_OUT\\\" when ( 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"1_NEW\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"true\\\" and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] ) then \\\"2_REOPEN\\\" when ( not 'New' and toDate('CloseDateEnd') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and (('Stage.IsClosedStart' == \\\"false\\\" and not(toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}])) or ('Stage.IsClosedStart' == \\\"true\\\")) ) then \\\"4_MOVED_IN\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'AmountStart', 'AmountEnd'; upd_full_notinperiod = filter upd_full_notinperiod by 'Bucket' != \\\"OTHER\\\"; upd_full_notinperiod = foreach upd_full_notinperiod generate 'Bucket', ( case 'Bucket' when \\\"5_MOVED_OUT\\\" then (0 - 'AmountEnd') when \\\"1_NEW\\\" then 'AmountEnd' when \\\"2_REOPEN\\\" then 'AmountEnd' when \\\"4_MOVED_IN\\\" then 'AmountEnd' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'Opportunity.Amount', 'Opportunity.CloseDate'; upd_delta = foreach upd generate ( case when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' > 'AmountEnd' ) then \\\"6_REDUCE\\\" when ( not 'New' and 'Stage.IsClosedStart' == \\\"false\\\" and toDate('CloseDateStart') in [{{cell(step_time.selection, 0, \\\"CloseDate_2\\\").asString()}}] and 'AmountStart' < 'AmountEnd' ) then \\\"3_EXPAND\\\" else \\\"OTHER\\\" end ) as 'Bucket', 'OpportunityId', 'Opportunity.Amount', 'Opportunity.CloseDate', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'AmountStart', 'AmountEnd'; upd_delta = filter upd_delta by 'Bucket' != \\\"OTHER\\\"; upd_delta = foreach upd_delta generate 'Bucket', ( case 'Bucket' when \\\"6_REDUCE\\\" then 'AmountEnd' - 'AmountStart' when \\\"3_EXPAND\\\" then 'AmountEnd' - 'AmountStart' end ) as 'Amount', 'OpportunityId', 'Opportunity.Account.ShippingState', 'Opportunity.Account.ShippingCity', 'Opportunity.Amount', 'Opportunity.CloseDate'; WATERFALL = union START, upd_full_notinperiod, upd_delta, upd_full_closed, END; WATERFALL = filter WATERFALL by {{column(waterfall_chart.selection, [\\\"Bucket\\\"]).asEquality(\\\"Bucket\\\")}}; WATERFALL = group WATERFALL by 'OpportunityId'; WATERFALL = foreach WATERFALL generate last('OpportunityId') as 'OpportunityId', last('Opportunity.Account.ShippingCity') as 'Opportunity.Account.ShippingCity', last('Opportunity.Account.ShippingState') as 'Opportunity.Account.ShippingState', last('Opportunity.Amount') as 'Opportunity.Amount', last('Opportunity.CloseDate') as 'Opportunity.CloseDate', last('Amount') as 'Amount'; WATERFALL = foreach WATERFALL generate 'OpportunityId', {{row(location_dimension_dropdown.selection, [], [\\\"dimension\\\", \\\"grouping_column\\\"]).asProjection()}}, 'Opportunity.CloseDate', 'Opportunity.Amount', 'Amount'; FINAL = group WATERFALL by 'Group'; FINAL = foreach FINAL generate 'Group', sum('Opportunity.Amount') as 'sum_Opportunity.Amount'; FINAL = order FINAL by 'sum_Opportunity.Amount' desc; FINAL = filter FINAL by 'Group' is not null;\",\"measures\":[[\"sum\",\"Opportunity.Amount\"]],\"groups\":[\"Group\"]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false,"visualizationParameters":{"visualizationType":"hbar"}},"filter_account_billing_country":{"broadcastFacet":false,"datasets":[{"name":"pipeline_trending3"}],"isGlobal":false,"query":{"query":"{\"measures\":[[\"count\",\"*\"]],\"groups\":[\"Opportunity.Account.ShippingState\"],\"filters\":[]}","version":-1.0},"receiveFacetSource":{"mode":"none","steps":[]},"selectMode":"single","type":"aggregateflex","useGlobal":false}},"widgetStyle":{"backgroundColor":"#FFFFFF","borderColor":"#E6ECF2","borderEdges":[],"borderRadius":0,"borderWidth":1},"widgets":{"link_overview":{"parameters":{"destination":"0FKC0000000L8qrOAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"Overview","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"container_13":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_1":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_2":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_3":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_4":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_5":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_6":{"parameters":{"alignmentX":"center","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"text_3":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"rgb(23, 50, 77)"},"insert":"Opportunity Details"},{"attributes":{"align":"left"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"chart_6":{"parameters":{"autoFitMode":"fit","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":true,"customSize":"auto","position":"right-top","inside":false},"axisMode":"multi","visualizationType":"hbar","exploreLink":false,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"textColor":"#FFFFFF","totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":""},"measureAxis1":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":""},"step":"waterfall_chart","theme":"dark","dimensionAxis":{"showTitle":true,"customSize":"auto","showAxis":true,"title":""}},"type":"chart"},"text_2":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"24px","color":"#091A3E"},"insert":"Leader Pipeline Changes"},{"attributes":{"align":"left"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"container_7":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"chart_5":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":""},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":""},"step":"Opportunity_Owner_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":""}},"type":"chart"},"text_5":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"16px","color":"#091A3E"},"insert":"Pipeline Segmentation"},{"attributes":{"align":"left"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"container_8":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"text_4":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2"},"insert":"Starting Pipeline"},{"attributes":{"align":"left"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"container_9":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"chart_2":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"textColor":"#FFFFFF","totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":""},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":""},"step":"AccountSource_Leadsource_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":""}},"type":"chart"},"chart_1":{"parameters":{"totalValue":"useLastBucket","showValues":true,"positiveColor":"rgb(46, 194, 186)","visualizationType":"waterfall","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"startColor":"rgb(68, 162, 245)","totalLabel":"","showActionMenu":true,"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":true,"title":""},"totalColor":"rgb(68, 162, 245)","step":"waterfall_chart","theme":"light","negativeColor":"rgb(146, 113, 232)","dimensionAxis":{"showTitle":false,"showAxis":true,"title":""}},"type":"chart"},"text_6":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"12px","color":"#335779"},"insert":"Sort Pipeline Amount by:"},{"attributes":{"align":"center"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"chart_4":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":""},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":""},"step":"Account_Type_Industry_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":""}},"type":"chart"},"chart_3":{"parameters":{"autoFitMode":"none","totalValue":"computeTotal","showValues":true,"bins":{"breakpoints":{"high":100,"low":0},"bands":{"high":{"color":"#008000","label":""},"low":{"color":"#B22222","label":""},"medium":{"color":"#ffa500","label":""}}},"legend":{"showHeader":true,"show":false,"customSize":"auto","position":"right-top","inside":false},"axisMode":"sync","visualizationType":"hbar","exploreLink":true,"title":{"label":"","align":"center","subtitleLabel":""},"trellis":{"enable":false,"type":"x","parameters":{},"chartsPerLine":4},"binValues":false,"totalLabel":"","showActionMenu":true,"measureAxis2":{"sqrtScale":false,"showTitle":true,"showAxis":true,"title":""},"measureAxis1":{"sqrtScale":false,"showTitle":false,"showAxis":false,"title":""},"step":"BillingCountry_BillingState_Chart","theme":"light","dimensionAxis":{"showTitle":false,"customSize":"auto","showAxis":true,"title":""}},"type":"chart"},"text_8":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"20px","color":"#FFFFFF"},"insert":"Leader Pipeline Changes"},{"attributes":{"align":"center"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"ui_RecordType_Name":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"dropdown_record_type","title":"Record Type"},"type":"listselector"},"text_1":{"parameters":{"content":{"richTextContent":[{"attributes":{"size":"14px","color":"#E6ECF2"},"insert":"Today's pipeline"},{"attributes":{"align":"left"},"insert":"\n"}]},"showActionMenu":true},"type":"text"},"link_lead_analysis":{"parameters":{"destination":"0FKC0000000L8r0OAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"Lead Analysis","textColor":"#091A3E"},"type":"link"},"number_4":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_percent","numberColor":"#FFFFFF","numberSize":14,"showActionMenu":true,"step":"pipeline_change","textAlignment":"center","title":"","titleColor":"#FFFFFF","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_3":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_Amount","numberColor":"#FFFFFF","numberSize":32,"showActionMenu":true,"step":"pipeline_change","textAlignment":"center","title":"Pipeline Change","titleColor":"#FFFFFF","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"number_2":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_Amount","numberColor":"#FFFFFF","numberSize":32,"showActionMenu":true,"step":"pipeline_start","textAlignment":"right","title":"","titleColor":"#FFFFFF","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"listselector_17":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"dropdown_opportunity_type","title":"Opportunity Classification"},"type":"listselector"},"number_1":{"parameters":{"compact":true,"exploreLink":true,"measureField":"sum_Amount","numberColor":"#FFFFFF","numberSize":32,"showActionMenu":true,"step":"pipeline_end","textAlignment":"center","title":"","titleColor":"#FFFFFF","titleSize":12,"tooltip":{"customizeTooltip":false}},"type":"number"},"container_12":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"container_11":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"listselector_10":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_lead_source","title":"Opportunity Record Type"},"type":"listselector"},"container_10":{"parameters":{"alignmentX":"left","alignmentY":"top","documentId":"","fit":"original"},"type":"container"},"listselector_16":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"step_hbar_group","title":""},"type":"listselector"},"listselector_14":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"opportunity_owner_dimension_dropdown","title":""},"type":"listselector"},"listselector_13":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"account_industry_dimension_dropdown","title":""},"type":"listselector"},"link_by_customer":{"parameters":{"destination":"0FKC0000000L8quOAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"By Customer","textColor":"rgb(9, 26, 62)"},"type":"link"},"link_pipeline_changes":{"parameters":{"destination":"0FKC0000000L8qsOAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"Pipeline Changes","textColor":"rgb(60, 141, 225)"},"type":"link"},"listselector_6":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_account_industry","title":"Class Description"},"type":"listselector"},"listselector_9":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_account_source","title":"Distributor Name(s)"},"type":"listselector"},"link_by_source":{"parameters":{"destination":"0FKC0000000L8qxOAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"By Source","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"listselector_8":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_account_billing_country","title":"Shipping State/Province"},"type":"listselector"},"listselector_3":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"source_dimension_dropdown","title":""},"type":"listselector"},"link_by_geography":{"parameters":{"destination":"0FKC0000000L8qvOAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"By Geography","textColor":"#091A3E"},"type":"link"},"listselector_2":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"none","showActionMenu":false,"step":"step_time","title":"Time Period"},"type":"listselector"},"listselector_5":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"filter_type","title":"Record Type"},"type":"listselector"},"listselector_4":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"showActionMenu":false,"step":"location_dimension_dropdown","title":""},"type":"listselector"},"link_by_product":{"parameters":{"destination":"0FKC0000000L8qwOAC","destinationType":"dashboard","fontSize":14,"includeState":false,"text":"By Product","textAlignment":"center","textColor":"#091A3E"},"type":"link"},"table_1":{"parameters":{"columnProperties":{},"columns":[],"customBulkActions":[],"exploreLink":true,"maxColumnWidth":300,"minColumnWidth":40,"mode":"variable","showActionMenu":true,"step":"waterfall_detail"},"type":"table"},"pillbox_1":{"parameters":{"compact":false,"exploreLink":false,"fontSize":16,"measureField":"count","selectedTab":{"backgroundColor":"#677A97","borderEdges":[],"textColor":"#FFFFFF"},"showActionMenu":true,"step":"Opportunity_ForecastCategoryName_Toggle","textColor":"#5C7A99"},"type":"pillbox"},"listselector_1":{"parameters":{"compact":false,"displayMode":"combo","expanded":true,"exploreLink":false,"filterStyle":{"titleColor":"#091A3E","valueColor":"#17324D"},"instant":true,"measureField":"count","showActionMenu":false,"step":"Id_1","title":"View As"},"type":"listselector"}}}